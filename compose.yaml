services:
  api1:
    image: game-api:latest
    build:
      context: ./api
      dockerfile: Dockerfile.api
    container_name: VideoGameAPI1
    ports:
      - 8080:8080
    depends_on:
      - mysql
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/VideoGameExchange
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=password
    networks:
      - game-network
  api2:
    image: game-api:latest
    container_name: VideoGameAPI2
    ports:
      - 8081:8080
    depends_on:
      - mysql
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/VideoGameExchange
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=password
    networks:
      - game-network
  api3:
    image: game-api:latest
    container_name: VideoGameAPI3
    ports:
      - 8082:8080
    depends_on:
      - mysql
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/VideoGameExchange
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=password
    networks:
      - game-network
  emailserver:
    image: email-server:latest
    container_name: VideoGameEmailServer
    build:
      context: ./emailServer
      dockerfile: Dockerfile.emailserver
    depends_on:
      - kafka
      - mysql
    restart: on-failure
    networks:
      - game-network
  mysql:
    image: mysql:latest
    container_name: VideoGameDB
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=VideoGameExchange
    ports:
      - "3306:3306"
    networks:
      - game-network
    volumes:
      - VideoGameDBVolume:/var/lib/mysql
  nginx:
    image: nginx:latest
    volumes:
      - ./dockerConf/nginx/nginxDefault.conf:/etc/nginx/conf.d/default.conf
    container_name: VideoGameNginx
    ports:
      - 80:80
    depends_on:
      - api1
      - api2
      - api3
    networks:
      - game-network
  kafka:
    image: bitnami/kafka
    container_name: VideoGameKafka
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
      - "./dockerConf/kafka/run-init-kafka-topics.sh:/docker-entrypoint-initdb.d/run-init-kafka-topics.sh:ro"
      - "./dockerConf/kafka/init-kafka-topics.sh:/init-kafka-topics.sh:ro"
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    networks:
      - game-network
  prometheus:
    image: prom/prometheus
    container_name: VideoGamePrometheus
    depends_on:
      - api1
      - api2
      - api3
      - kafka
      - mysql
      - emailserver
    volumes:
      - ./prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    networks:
      - game-network
networks:
  game-network:
    name: game-network
volumes:
  VideoGameDBVolume:
    external: true
  kafka_data:
    driver: local
    name: VideoGameKafkaVolume
