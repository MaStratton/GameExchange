services:
  api1:
    image: game-api:latest
    build:
      context: ./api
      dockerfile: Dockerfile.api
    container_name: VideoGameAPI1
    ports:
      - 8080:8080
    depends_on:
      - mysql
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/VideoGameExchange
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=password
    networks:
      - game-network
  api2:
    image: game-api:latest
    container_name: VideoGameAPI2
    depends_on:
      - mysql
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/VideoGameExchange
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=password
    networks:
      - game-network
  api3:
    image: game-api:latest
    container_name: VideoGameAPI3
    depends_on:
      - mysql
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/VideoGameExchange
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=password
    networks:
      - game-network
  nginx:
    image: nginx:latest
    container_name: VideoGameNginx
    volumes:
      - ./dockerConf/nginx/nginxDefault.conf:/etc/nginx/conf.d/default.conf
    ports:
      - 80:80
    depends_on:
      - api1
      - api2
      - api3
    networks:
      - game-network
  telegraf:
    image: telegraf:latest
    container_name: VideoGameTelegraf
    volumes:
      - ./dockerConf/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf
    networks:
      - game-network
  nginx_prometheus_exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: VideoGameNginxExporter
    depends_on:
      - nginx
    command: "--nginx.scrape-uri=http://VideoGameNginx:8080/stub_status"
    networks:
      - game-network
  emailserver:
    image: email-server:latest
    container_name: VideoGameEmailServer
    build:
      context: ./emailServer
      dockerfile: Dockerfile.emailserver
    depends_on:
      - kafka
      - mysql
    networks:
      - game-network
  mysql:
    image: mysql:latest
    container_name: VideoGameDB
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=VideoGameExchange
    ports:
      - "3306:3306"
    networks:
      - game-network
    volumes:
      - VideoGameDBVolume:/var/lib/mysql
  mysql-exporter:
    image: prom/mysqld-exporter
    container_name: VideoGameMySQLExporter
    volumes:
      - ./dockerConf/mysql/config.my-cnf:/cfg/config.my-cnf
    command: "--config.my-cnf=/cfg/config.my-cnf"
    networks:
      - game-network
  kafka:
    image: bitnami/kafka
    container_name: VideoGameKafka
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
      - "./dockerConf/kafka/run-init-kafka-topics.sh:/docker-entrypoint-initdb.d/run-init-kafka-topics.sh:ro"
      - "./dockerConf/kafka/init-kafka-topics.sh:/init-kafka-topics.sh:ro"
      - "./dockerConf/kafka/jmx_prometheus_javaagent-1.1.0.jar:/opt/prometheus/jmx_prometheus_javaagent-1.1.0.jar"
      - "./dockerConf/kafka/config.yaml:/opt/prometheus/config.yaml"
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      # Prometheus Metrics
      - EXTRA_ARGS=-javaagent:/opt/prometheus/jmx_prometheus_javaagent-1.1.0.jar=1099:/opt/prometheus/config.yaml
      - JMX_PROMETHEUS_PORT:1099
    networks:
      - game-network
  prometheus:
    image: prom/prometheus
    container_name: VideoGamePrometheus
    depends_on:
      - api1
      - api2
      - api3
      - kafka
      - mysql
      - emailserver
    volumes:
      - ./prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    networks:
      - game-network
  grafana:
    image: grafana/grafana:latest
    container_name: VideoGameGrafana
    depends_on:
      - prometheus
    environment:
      - GF_AUTH_ADMIN_USER=root
      - GF_AUTH_ADMIN_PASSWORD=password
      - DATASOURCE=VideoGamePrometheus
    ports:
      - 3000:3000
    volumes:
      - ./dockerConf/grafana/datasource.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    networks:
      - game-network
networks:
  game-network:
    name: game-network
volumes:
  VideoGameDBVolume:
    external: true
  kafka_data:
    driver: local
    name: VideoGameKafkaVolume
